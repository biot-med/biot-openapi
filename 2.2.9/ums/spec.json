{"openapi":"3.0.1","info":{"title":"BioT User Management Service","description":"APIs document (version: 6.31.2)","version":"6.31.2"},"servers":[{"url":"/ums"}],"paths":{"/v2/users":{"get":{"tags":["User API"],"summary":"Search User entities by filter","description":"Search User entities by filter\n\nSearch User entities by filter\n\nReturns list of User, the response can be filtered, sorted and supports pagination\n\n\n## Filter\nEach additionalProp can filter one field, inside additionalProp there are many optional conditions that can be used for filtering that field\n\nWhen multiple conditions are specified, they are bundled together using logical AND operators, this means that only the items that match all filter conditions for that field will be returned\n\n***filter*** items possible values: [ *id*,*username*,*active*,*locked* ] \n\n## Sort\nResults can be sorted by multiple fields, the order of the fields in the sort request governs the hierarchy of the sort\n\nThe first field is the primary sort, the second is used when two values of the first field are the same, and so forth\n\n***sort.order*** default value is DESC\n\n***sort.prop*** possible values:[ *id*,*username*,*active*,*locked*,*creationTime* ]\n\nIf sort was not specified, the result will be sorted by: creationTime DESC\n\n## Free text search\nWhen freeTextSearch is passed, the free text search will be performed on every field except those of type Date\n\nIf used together with filters, freeTextSearch will be bundled to the filters with the logical AND operator, this means that only items that match all filters (and each filter's conditions) and the free text search will be returned\n\n## Page\n***limit*** max number of results that will be returned for each page. If not specify, the default will be 100\n\n***page*** page number starting from 0. If not specify, the default will be 0\n\n## Build URL\nEncode the JSON object and use the encoded string as the searchRequest parameter:\n\nhttps://&lt;URL&gt;?searchRequest=<ENCODED_JSON_STRING>\n\n\n\nThis API requires **UMS_USERS_SEARCH_USER** permission(s).\n\n\n\nThis API requires **UMS_USERS_SEARCH_USER** permission(s).\n\n","operationId":"search","parameters":[{"name":"searchRequest","in":"query","description":"Search request parameters: filter, sort and page","required":false,"content":{"*/*":{"schema":{"$ref":"#/components/schemas/SearchRequestV2"}}}}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SearchResponseUserResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]},"post":{"tags":["User API"],"summary":"Create a new User","description":"Create a new User\n\nCreate a new User\n\n\n\n\n\nThis API requires **UMS_USERS_CREATE_USER** permission(s).\n\n\n\nThis API requires **UMS_USERS_CREATE_USER** permission(s).\n\n","operationId":"createUser","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUserRequest"}}},"required":true},"responses":{"400":{"description":"Code : OWNER_ORGANIZATION_ID_IS_MISSING, Details: []\n\nCode : INVALID_PASSWORD, Details: []\n\nCode : PASSWORD_ALREADY_USED, Details: [passwordNumber]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"500":{"description":"Code : FAILED_TO_ENCRYPT_PASSWORD, Details: []\n\nCode : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : GROUPS_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : USER_ID_ALREADY_EXISTS, Details: [id]\n\nCode : USERNAME_ALREADY_EXISTS, Details: [username]\n\nCode : PHONE_DOES_NOT_EXIST, Details: [userId]\n\nCode : PHONE_NOT_VALID, Details: [phone, userId]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/users/{id}/password/generate":{"post":{"tags":["User API"],"summary":"Generate a new password for a User","description":"Generate a new password for a User\n\nGenerate a new password for a User\n\n\n\n\n\nThis API requires **UMS_USERS_GENERATE_USER_PASSWORD** permission(s).\n\n\n\nThis API requires **UMS_USERS_GENERATE_USER_PASSWORD** permission(s).\n\n","operationId":"generateUserPassword","parameters":[{"name":"id","in":"path","description":"User ID","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"responses":{"400":{"description":"Code : IDP_NOT_SUPPORTED_FOR_USER, Details: [idp]\n\nCode : CHANGE_PASSWORD_NOT_SUPPORTED_FOR_USER_WITHOUT_PASSWORD_TYPE, Details: [id]\n\nCode : PASSWORD_ALREADY_USED, Details: [passwordNumber]\n\nCode : INVALID_PASSWORD, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenerateUserPasswordResponse"}}}},"500":{"description":"Code : FAILED_TO_ENCRYPT_PASSWORD, Details: []\n\nCode : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/users/token/refresh":{"post":{"tags":["Login API"],"summary":"Refresh JWT token","description":"Refresh JWT token\n\nRefresh JWT token\n\n\n\nCreate new access token with refresh token in request\n\n\n\n### The below table describes the request parameters:\n\n| Parameter          | Type          | Mandatory | Description                                                   |\n            |--------------------|---------------|-----------|---------------------------------------------------------------|\n             | refreshToken | String | true | \n\n\n\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"refreshToken","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RefreshTokenRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"\n\n### The below table describes the response parameters:\n\n| Parameter          | Type       | Description                                                   |\n            |--------------------|-------------|---------------------------------------------------------------|\n             | refreshToken | String | \n | userId | UUID | \n | ownerOrganizationId | UUID | \n | accessJwt | JSON | An object that contains the token and expiration date\n | refreshJwt | JSON | An object that contains the token and expiration date\n | mfaRequired | Boolean | \n | mfaExpirationInMinutes | Local Date Time | \n | passwordResetRequired | Boolean | \n | phone | String | \n\n\n","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : LOGIN_FAILED, Details: []\n\nCode : REFRESH_TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}}}},"/v2/users/token/login":{"post":{"tags":["Login API"],"summary":"Login with refresh token","description":"Login with refresh token\n\nLogin with refresh token\n\n\n\nCreates a new pair of access and refresh tokens.\n\nUsed in 'remember my password' flow\n\n\n\n### The below table describes the request parameters:\n\n| Parameter          | Type          | Mandatory | Description                                                   |\n            |--------------------|---------------|-----------|---------------------------------------------------------------|\n             | refreshToken | String | true | \n\n\n\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"tokenLogin","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginWithTokenRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"\n\n### The below table describes the response parameters:\n\n| Parameter          | Type       | Description                                                   |\n            |--------------------|-------------|---------------------------------------------------------------|\n             | refreshToken | String | \n | userId | UUID | \n | ownerOrganizationId | UUID | \n | accessJwt | JSON | An object that contains the token and expiration date\n | refreshJwt | JSON | An object that contains the token and expiration date\n | mfaRequired | Boolean | \n | mfaExpirationInMinutes | Local Date Time | \n | passwordResetRequired | Boolean | \n | phone | String | \n\n\n","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : LOGIN_FAILED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}}}},"/v2/users/self":{"get":{"tags":["Self User API"],"summary":"Self get user","description":"Self get user\n\nSelf get user\n\nUser ID is taken from the JWT token\n\nThis API requires **UMS_USERS_SELF_GET_USER** permission(s).\n\n\n\nThis API requires **UMS_USERS_SELF_GET_USER** permission(s).\n\n","operationId":"selfGetUser","responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"SUCCESS","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]},"post":{"tags":["Self User API"],"summary":"Self registration of User","description":"Self registration of User\n\nSelf registration of User\n\npassword is mandatory only for ***PASSWORD*** credentialType\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"selfRegisterUser","parameters":[{"name":"Owner-Organization-Id","in":"header","required":false,"schema":{"type":"string","format":"uuid"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SelfRegisterUserRequest"}}},"required":true},"responses":{"400":{"description":"Code : OWNER_ORGANIZATION_ID_IS_MISSING, Details: []\n\nCode : PASSWORD_ALREADY_USED, Details: [passwordNumber]\n\nCode : INVALID_PASSWORD, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"201":{"description":"CREATED","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"500":{"description":"Code : FAILED_TO_ENCRYPT_PASSWORD, Details: []\n\nCode : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : GROUPS_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : USER_ID_ALREADY_EXISTS, Details: [id]\n\nCode : USERNAME_ALREADY_EXISTS, Details: [username]\n\nCode : PHONE_DOES_NOT_EXIST, Details: [userId]\n\nCode : PHONE_NOT_VALID, Details: [phone, userId]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}}},"delete":{"tags":["Self User API"],"summary":"Self delete user","description":"Self delete user\n\nSelf delete user\n\nUser ID is taken from the JWT token\n\nThis API requires **UMS_USERS_SELF_DELETE_USER** permission(s).\n\n\n\nThis API requires **UMS_USERS_SELF_DELETE_USER** permission(s).\n\n","operationId":"selfDeleteUser","responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"204":{"description":"NO_CONTENT"},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]},"patch":{"tags":["Self User API"],"summary":"Self update user","description":"Self update user\n\nSelf update user\n\nUser ID is taken from the JWT token\n\nThis API requires **UMS_USERS_SELF_UPDATE_USER** permission(s).\n\n\n\nThis API requires **UMS_USERS_SELF_UPDATE_USER** permission(s).\n\n","operationId":"selfUpdateUser","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SelfUpdateUserRequest"}}},"required":true},"responses":{"400":{"description":"Code : CHANGE_PASSWORD_NOT_SUPPORTED, Details: [credentialType]\n\nCode : PASSWORD_ALREADY_USED, Details: [passwordNumber]\n\nCode : INVALID_PASSWORD, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"SUCCESS","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"500":{"description":"Code : FAILED_TO_ENCRYPT_PASSWORD, Details: []\n\nCode : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : CURRENT_PASSWORD_DOES_NOT_MATCH, Details: [username]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/users/self/password/forgot":{"post":{"tags":["Self User API"],"summary":"Forgot password API, if the username exists - reset password message will be sent to mail","description":"Forgot password API, if the username exists - reset password message will be sent to mail\n\nForgot password API, if the username exists - reset password message will be sent to mail\n\n\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"forgotPassword","parameters":[{"name":"forgot-password-landing-page","in":"header","description":"Landing page that will be sent in confirmation mail","required":true,"schema":{"type":"string"},"example":"https://example.com/en/forgot-password/landing-page"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ForgotPasswordRequestV2"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"SUCCESS"},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}}}},"/v2/users/logout":{"post":{"tags":["Login API"],"summary":"Logout","description":"Logout\n\nLogout\n\nLogout by providing refresh token\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"logout","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LogoutRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"SUCCESS"},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}}}},"/v2/users/login":{"post":{"tags":["Login API"],"summary":"Login with credentials","description":"Login with credentials\n\nLogin with credentials\n\n\n\nLogin with username and password, or username and otp.\n* For ***PASSWORD*** credential type you must specify username and password\n\n\n\n### The below table describes the request parameters:\n\n| Parameter          | Type          | Mandatory | Description                                                   |\n            |--------------------|---------------|-----------|---------------------------------------------------------------|\n             | username | String | true | \n | password | String | true | \n\n\n\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"login","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginRequestV2"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"\n\n### The below table describes the response parameters:\n\n| Parameter          | Type       | Description                                                   |\n            |--------------------|-------------|---------------------------------------------------------------|\n             | userId | UUID | \n | ownerOrganizationId | UUID | \n | accessJwt | JSON | An object that contains the token and expiration date\n | refreshJwt | JSON | An object that contains the token and expiration date. If passwordResetRequired=true or mfaRequired=true, this field will be null\n | mfaRequired | Boolean | \n | mfaExpirationInMinutes | Local Date Time | \n | passwordResetRequired | Boolean | \n | phone | String | \n\n\n","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginResponse"}}}},"401":{"description":"Code : USER_LOCKED, Details: []\n\nCode : USER_LOCKED_WITH_TIME, Details: [timeLeftInMinutes]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : LOGIN_FAILED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}}}},"/v2/users/login/mfa":{"post":{"tags":["MFA Login API"],"summary":"MFA login","description":"MFA login\n\nMFA login\n\nLogin by verification code sent by SMS. In case a password reset is required (i.e. passwordResetRequired=true), the refreshJwt field will be null\n\nThis API requires **UMS_MFA_LOGIN** permission(s).\n\n\n\nThis API requires **UMS_MFA_LOGIN** permission(s).\n\n","operationId":"mfaLogin","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MfaLoginRequestV2"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"SUCCESS","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginResponse"}}}},"401":{"description":"Code : MFA_VERIFICATION_CODE_INCORRECT, Details: [id]\n\nCode : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/users/login/mfa/resend":{"post":{"tags":["MFA Login API"],"summary":"Resend SMS for MFA verification","description":"Resend SMS for MFA verification\n\nResend SMS for MFA verification\n\nUsed to send the second-factor authentication by SMS containing the verification code\n\nThis API requires **UMS_RESEND_MFA_SMS** permission(s).\n\n\n\nThis API requires **UMS_RESEND_MFA_SMS** permission(s).\n\n","operationId":"mfaResend","responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"SUCCESS"},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : PHONE_DOES_NOT_EXIST, Details: [userId]\n\nCode : PHONE_NOT_VALID, Details: [phone, userId]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/services":{"post":{"tags":["Service User API"],"summary":"Create a new Service User","description":"Create a new Service User\n\nCreate a new Service User\n\n\n\n\n\nThis API requires **UMS_SERVICES_CREATE_SERVICE_USER** permission(s).\n\n\n\nThis API requires **UMS_SERVICES_CREATE_SERVICE_USER** permission(s).\n\n","operationId":"createServiceUser","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateServiceUserRequest"}}},"required":true},"responses":{"400":{"description":"Code : SERVICE_TYPE_NOT_ALLOWED, Details: [attributeName, value]\n\nCode : MISSING_PARAMETERS, Details: [parameters]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateServiceUserResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : OWNER_ORGANIZATION_NOT_FOUND, Details: [id]\n\nCode : PERMISSIONS_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : SERVICE_NAME_ALREADY_EXISTS, Details: [name]\n\nCode : ROLE_ALREADY_EXISTS, Details: [name]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/services/{id}/secret-keys":{"post":{"tags":["Service User API"],"summary":"Create a new Service User Secret Key","description":"Create a new Service User Secret Key\n\nCreate a new Service User Secret Key\n\n\n\n\n\nThis API requires **UMS_USERS_CREATE_SECRET_KEY_BY_SERVICE_USER_ID** permission(s).\n\n\n\nThis API requires **UMS_USERS_CREATE_SECRET_KEY_BY_SERVICE_USER_ID** permission(s).\n\n","operationId":"createSecretKey","parameters":[{"name":"id","in":"path","description":"Service User Secret Key ID","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateSecretKeyResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : SERVICE_USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : MAX_SECRET_KEYS, Details: [serviceId, maxSecretKeys]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/services/accessToken":{"post":{"tags":["Service User API"],"summary":"Service User Login","description":"Service User Login\n\nService User Login\n\n\n\n\n\n### The below table describes the request parameters:\n\n| Parameter          | Type          | Mandatory | Description                                                   |\n            |--------------------|---------------|-----------|---------------------------------------------------------------|\n             | id | UUID | true | \n | secretKey | String | true | \n\n\n\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"serviceUserLogin","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceUserAccessTokenRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"\n\n### The below table describes the response parameters:\n\n| Parameter          | Type       | Description                                                   |\n            |--------------------|-------------|---------------------------------------------------------------|\n             | id | UUID | \n | secretKey | String | \n\n\n","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceUserAccessTokenResponse"}}}},"401":{"description":"Code : SERVICE_LOCKED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : LOGIN_FAILED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}}}},"/v2/admin/roles":{"get":{"tags":["Role API"],"summary":"Search Role entities by filter","description":"Search Role entities by filter\n\nSearch Role entities by filter\n\nReturns list of Role, the response can be filtered, sorted and supports pagination\n\n\n## Filter\nEach additionalProp can filter one field, inside additionalProp there are many optional conditions that can be used for filtering that field\n\nWhen multiple conditions are specified, they are bundled together using logical AND operators, this means that only the items that match all filter conditions for that field will be returned\n\n***filter*** items possible values: [ *id*,*name* ] \n\n## Sort\nResults can be sorted by multiple fields, the order of the fields in the sort request governs the hierarchy of the sort\n\nThe first field is the primary sort, the second is used when two values of the first field are the same, and so forth\n\n***sort.order*** default value is DESC\n\n***sort.prop*** possible values:[ *name*,*creationTime*,*lastModifiedTime* ]\n\nIf sort was not specified, the result will be sorted by: creationTime DESC\n\n## Free text search\nWhen freeTextSearch is passed, the free text search will be performed on every field except those of type Date\n\nIf used together with filters, freeTextSearch will be bundled to the filters with the logical AND operator, this means that only items that match all filters (and each filter's conditions) and the free text search will be returned\n\n## Page\n***limit*** max number of results that will be returned for each page. If not specify, the default will be 100\n\n***page*** page number starting from 0. If not specify, the default will be 0\n\n## Build URL\nEncode the JSON object and use the encoded string as the searchRequest parameter:\n\nhttps://&lt;URL&gt;?searchRequest=<ENCODED_JSON_STRING>\n\n\n\nThis API requires **UMS_ADMIN_ROLES_SEARCH_ROLES** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_ROLES_SEARCH_ROLES** permission(s).\n\n","operationId":"searchRoles","parameters":[{"name":"searchRequest","in":"query","description":"Search request parameters: filter, sort and page","required":false,"content":{"*/*":{"schema":{"$ref":"#/components/schemas/SearchRequestV2"}}}}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SearchResponseRoleResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]},"post":{"tags":["Role API"],"summary":"Create a new Role","description":"Create a new Role\n\nCreate a new Role\n\n\n\n\n\nThis API requires **UMS_ADMIN_ROLES_CREATE_ROLE** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_ROLES_CREATE_ROLE** permission(s).\n\n","operationId":"createRole","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateRoleAdminRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : PERMISSIONS_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : ROLE_ALREADY_EXISTS, Details: [name]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/admin/roles/{id}/permissions/dissociate":{"post":{"tags":["Role API"],"summary":"Dissociate Permissions from Role","description":"Dissociate Permissions from Role\n\nDissociate Permissions from Role\n\n\n\nAll permissions must be exist\n\n\n\nThis API requires **UMS_ADMIN_ROLES_DISSOCIATE_PERMISSIONS** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_ROLES_DISSOCIATE_PERMISSIONS** permission(s).\n\n","operationId":"dissociatePermissionsFromRole","parameters":[{"name":"id","in":"path","description":"Role ID","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DissociatePermissionsFromRoleAdminRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : ROLE_NOT_FOUND, Details: [id]\n\nCode : PERMISSIONS_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/admin/roles/{id}/permissions/associate":{"post":{"tags":["Role API"],"summary":"Associate Permissions to Role","description":"Associate Permissions to Role\n\nAssociate Permissions to Role\n\n\n\nAll permissions must be exist\n\n\n\nThis API requires **UMS_ADMIN_ROLES_ASSOCIATE_PERMISSIONS** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_ROLES_ASSOCIATE_PERMISSIONS** permission(s).\n\n","operationId":"associatePermissionsToRole","parameters":[{"name":"id","in":"path","description":"Role ID","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssociatePermissionsToRoleAdminRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : ROLE_NOT_FOUND, Details: [id]\n\nCode : PERMISSIONS_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/admin/groups":{"get":{"tags":["Group API"],"summary":"Search Group entities by filter","description":"Search Group entities by filter\n\nSearch Group entities by filter\n\nReturns list of Group, the response can be filtered, sorted and supports pagination\n\n\n## Filter\nEach additionalProp can filter one field, inside additionalProp there are many optional conditions that can be used for filtering that field\n\nWhen multiple conditions are specified, they are bundled together using logical AND operators, this means that only the items that match all filter conditions for that field will be returned\n\n***filter*** items possible values: [ *id*,*name* ] \n\n## Sort\nResults can be sorted by multiple fields, the order of the fields in the sort request governs the hierarchy of the sort\n\nThe first field is the primary sort, the second is used when two values of the first field are the same, and so forth\n\n***sort.order*** default value is DESC\n\n***sort.prop*** possible values:[ *name*,*creationTime*,*lastModifiedTime* ]\n\nIf sort was not specified, the result will be sorted by: creationTime DESC\n\n## Free text search\nWhen freeTextSearch is passed, the free text search will be performed on every field except those of type Date\n\nIf used together with filters, freeTextSearch will be bundled to the filters with the logical AND operator, this means that only items that match all filters (and each filter's conditions) and the free text search will be returned\n\n## Page\n***limit*** max number of results that will be returned for each page. If not specify, the default will be 100\n\n***page*** page number starting from 0. If not specify, the default will be 0\n\n## Build URL\nEncode the JSON object and use the encoded string as the searchRequest parameter:\n\nhttps://&lt;URL&gt;?searchRequest=<ENCODED_JSON_STRING>\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_SEARCH_GROUPS** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_SEARCH_GROUPS** permission(s).\n\n","operationId":"searchGroups","parameters":[{"name":"searchRequest","in":"query","description":"Search request parameters: filter, sort and page","required":false,"content":{"*/*":{"schema":{"$ref":"#/components/schemas/SearchRequestV2"}}}}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SearchResponseGroupResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]},"post":{"tags":["Group API"],"summary":"Create a new Group","description":"Create a new Group\n\nCreate a new Group\n\n\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_CREATE_GROUP** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_CREATE_GROUP** permission(s).\n\n","operationId":"createGroup","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateGroupAdminRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : ROLES_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : GROUP_ALREADY_EXIST, Details: [name]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/admin/groups/{id}/roles/dissociate":{"post":{"tags":["Group API"],"summary":"Dissociate Roles from Group","description":"Dissociate Roles from Group\n\nDissociate Roles from Group\n\n\n\nAll roles must be exist\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_DISSOCIATE_ROLES** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_DISSOCIATE_ROLES** permission(s).\n\n","operationId":"dissociateRolesFromGroup","parameters":[{"name":"id","in":"path","description":"Group ID","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DissociateRolesFromGroupAdminRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : GROUP_NOT_FOUND, Details: [id]\n\nCode : ROLES_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : CANNOT_MODIFY_BUILT_IN_GROUP, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/admin/groups/{id}/roles/associate":{"post":{"tags":["Group API"],"summary":"Associate Roles to Group","description":"Associate Roles to Group\n\nAssociate Roles to Group\n\n\n\nAll roles must be exist\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_ASSOCIATE_ROLES** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_ASSOCIATE_ROLES** permission(s).\n\n","operationId":"associateRolesToGroup","parameters":[{"name":"id","in":"path","description":"Group ID","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssociateRolesToGroupAdminRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : GROUP_NOT_FOUND, Details: [id]\n\nCode : ROLES_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : CANNOT_MODIFY_BUILT_IN_GROUP, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v1/tokens/{token}":{"get":{"tags":["Temporary Token Operation API"],"summary":"Validation token operation","description":"Validation token operation\n\nValidation token operation\n\nValidate that token, operation and entity ID are valid and not expired.\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"validateTokenOperation","parameters":[{"name":"token","in":"path","description":"Temporary token for calling this API","required":true,"schema":{"type":"string"},"example":"UEM8EM8axpogWy"},{"name":"operation","in":"query","description":"Operation name","required":true,"schema":{"type":"string"},"example":"my-operation"},{"name":"entityId","in":"query","description":"The entity id of the operation","required":true,"schema":{"type":"string"},"example":"id"}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"SUCCESS"},"401":{"description":"TOKEN_NOT_VALID","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}}},"post":{"tags":["Temporary Token Operation API"],"summary":"Execute token operation","description":"Execute token operation\n\nExecute token operation\n\nExecute operation by specifying a temp token instead of jwt token\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"executeTokenOperation","parameters":[{"name":"token","in":"path","description":"Temporary token for calling this API","required":true,"schema":{"type":"string"},"example":"UEM8EM8axpogWy"},{"name":"operation","in":"query","description":"Operation name","required":true,"schema":{"type":"string"},"example":"my-operation"},{"name":"entityId","in":"query","description":"The entity id of the operation","required":true,"schema":{"type":"string"},"example":"id"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TokenOperationRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"SUCCESS","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TokenOperationResponse"}}}},"401":{"description":"TOKEN_NOT_VALID","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}}}},"/v1/permissions/sync":{"post":{"tags":["permissions-controller"],"description":"\n\n\n\n\n\nThis API requires **PERMISSIONS_SYNC_PERMISSIONS** permission(s).\n\n\n\nThis API requires **PERMISSIONS_SYNC_PERMISSIONS** permission(s).\n\n","operationId":"syncPermissions","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncPermissionsRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncPermissionsCompletedMessage"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/users/{id}":{"get":{"tags":["User API"],"summary":"Get User by ID","description":"Get User by ID\n\nGet User by ID\n\n\n\n\n\nThis API requires **UMS_USERS_GET_USER** permission(s).\n\n\n\nThis API requires **UMS_USERS_GET_USER** permission(s).\n\n","operationId":"getUser","parameters":[{"name":"id","in":"path","description":"User ID that needs to be fetched","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]},"delete":{"tags":["User API"],"summary":"Delete User","description":"Delete User\n\nDelete User\n\n\n\n\n\nThis API requires **UMS_USERS_DELETE_USER** permission(s).\n\n\n\nThis API requires **UMS_USERS_DELETE_USER** permission(s).\n\n","operationId":"delete","parameters":[{"name":"id","in":"path","description":"User ID that needs to be deleted","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"204":{"description":""},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]},"patch":{"tags":["User API"],"summary":"Update User","description":"Update User\n\nUpdate User\n\nPerforms partial update, if a field is specified in the request it will be updated\n\n\n\nThis API requires **UMS_USERS_UPDATE_USER** permission(s).\n\n\n\nThis API requires **UMS_USERS_UPDATE_USER** permission(s).\n\n","operationId":"updateUser","parameters":[{"name":"id","in":"path","description":"User ID that needs to be updated","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateUserRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : USER_NOT_FOUND, Details: [id]\n\nCode : GROUPS_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : USERNAME_ALREADY_EXISTS, Details: [username]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/services/{id}":{"get":{"tags":["Service User API"],"summary":"Get Service User by ID","description":"Get Service User by ID\n\nGet Service User by ID\n\n\n\n\n\nThis API requires **UMS_USERS_GET_SERVICE_USER_BY_ID** permission(s).\n\n\n\nThis API requires **UMS_USERS_GET_SERVICE_USER_BY_ID** permission(s).\n\n","operationId":"getServiceUserById","parameters":[{"name":"id","in":"path","description":"Service User ID that needs to be fetched","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetServiceUserV2Response"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : SERVICE_USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]},"delete":{"tags":["Service User API"],"summary":"Delete Service User","description":"Delete Service User\n\nDelete Service User\n\n\n\n\n\nThis API requires **UMS_SERVICES_DELETE_SERVICE_USER** permission(s).\n\n\n\nThis API requires **UMS_SERVICES_DELETE_SERVICE_USER** permission(s).\n\n","operationId":"deleteServiceUser","parameters":[{"name":"id","in":"path","description":"Service User ID that needs to be deleted","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"204":{"description":""},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : SERVICE_USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]},"patch":{"tags":["Service User API"],"summary":"Update Service User","description":"Update Service User\n\nUpdate Service User\n\nPerforms partial update, if a field is specified in the request it will be updated\n\n\n\nThis API requires **UMS_SERVICES_UPDATE_SERVICE_USER** permission(s).\n\n\n\nThis API requires **UMS_SERVICES_UPDATE_SERVICE_USER** permission(s).\n\n","operationId":"updateServiceUser","parameters":[{"name":"id","in":"path","description":"Service User ID that needs to be updated","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateServiceUserV2Request"}}},"required":true},"responses":{"400":{"description":"Code : SERVICE_TYPE_NOT_ALLOWED, Details: [attributeName, value]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateServiceUserV2Response"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : SERVICE_USER_NOT_FOUND, Details: [id]\n\nCode : ROLE_NOT_FOUND_IN_SUPPORTED_TYPES, Details: [id, types]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/admin/roles/{id}":{"delete":{"tags":["Role API"],"summary":"Delete Role","description":"Delete Role\n\nDelete Role\n\n\n\n\n\nThis API requires **UMS_ADMIN_ROLES_DELETE_ROLE** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_ROLES_DELETE_ROLE** permission(s).\n\n","operationId":"deleteRole","parameters":[{"name":"id","in":"path","description":"Role ID that needs to be deleted","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"204":{"description":""},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : ROLE_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]},"patch":{"tags":["Role API"],"summary":"Update Role","description":"Update Role\n\nUpdate Role\n\nPerforms partial update, if a field is specified in the request it will be updated\n\nPermission ids, if provided (either null, empty list or a non empty list) will replace the existing related permissions\n\n\n\nThis API requires **UMS_ADMIN_ROLES_UPDATE_ROLE** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_ROLES_UPDATE_ROLE** permission(s).\n\n","operationId":"updateRole","parameters":[{"name":"id","in":"path","description":"Role ID that needs to be updated","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateRoleAdminRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : ROLE_NOT_FOUND, Details: [id]\n\nCode : PERMISSIONS_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : ROLE_ALREADY_EXISTS, Details: [name]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/admin/groups/{id}":{"delete":{"tags":["Group API"],"summary":"Delete Group","description":"Delete Group\n\nDelete Group\n\n\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_DELETE_GROUP** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_DELETE_GROUP** permission(s).\n\n","operationId":"deleteGroup","parameters":[{"name":"id","in":"path","description":"Group ID that needs to be deleted","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"204":{"description":""},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : GROUP_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : CANNOT_MODIFY_BUILT_IN_GROUP, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]},"patch":{"tags":["Group API"],"summary":"Update Group","description":"Update Group\n\nUpdate Group\n\nPerforms partial update, if a field is specified in the request it will be updated\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_UPDATE_GROUP** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_GROUPS_UPDATE_GROUP** permission(s).\n\n","operationId":"updateGroup","parameters":[{"name":"id","in":"path","description":"Group ID that needs to be updated","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateGroupAdminRequest"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : GROUP_NOT_FOUND, Details: [id]\n\nCode : ROLES_NOT_FOUND, Details: [ids]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Code : CANNOT_MODIFY_BUILT_IN_GROUP, Details: [id]\n\nCode : GROUP_ALREADY_EXIST, Details: [name]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/users/self/permissions/ui":{"get":{"tags":["Self Permission API"],"summary":"Get ui permissions for the connected user","description":"Get ui permissions for the connected user\n\nGet ui permissions for the connected user\n\n\n\nThis API requires **PROTECTED_API** permission(s).\n\n\n\nThis API requires **PROTECTED_API** permission(s).\n\n","operationId":"getUiPermissions","responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"SUCCESS","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPermissionsResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : USER_NOT_FOUND, Details: [id]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v2/admin/permissions":{"get":{"tags":["Permission API"],"summary":"Search Permission entities by filter","description":"Search Permission entities by filter\n\nSearch Permission entities by filter\n\nReturns list of Permission, the response can be filtered, sorted and supports pagination\n\n\n## Filter\nEach additionalProp can filter one field, inside additionalProp there are many optional conditions that can be used for filtering that field\n\nWhen multiple conditions are specified, they are bundled together using logical AND operators, this means that only the items that match all filter conditions for that field will be returned\n\n***filter*** items possible values: [ *id*,*type* ] \n\n## Sort\nResults can be sorted by multiple fields, the order of the fields in the sort request governs the hierarchy of the sort\n\nThe first field is the primary sort, the second is used when two values of the first field are the same, and so forth\n\n***sort.order*** default value is DESC\n\n***sort.prop*** possible values:[ *id*,*creationTime*,*lastModifiedTime* ]\n\nIf sort was not specified, the result will be sorted by: creationTime DESC\n\n## Free text search\nWhen freeTextSearch is passed, the free text search will be performed on every field except those of type Date\n\nIf used together with filters, freeTextSearch will be bundled to the filters with the logical AND operator, this means that only items that match all filters (and each filter's conditions) and the free text search will be returned\n\n## Page\n***limit*** max number of results that will be returned for each page. If not specify, the default will be 100\n\n***page*** page number starting from 0. If not specify, the default will be 0\n\n## Build URL\nEncode the JSON object and use the encoded string as the searchRequest parameter:\n\nhttps://&lt;URL&gt;?searchRequest=<ENCODED_JSON_STRING>\n\n\n\nThis API requires **UMS_ADMIN_PERMISSIONS_SEARCH_PERMISSIONS** permission(s).\n\n\n\nThis API requires **UMS_ADMIN_PERMISSIONS_SEARCH_PERMISSIONS** permission(s).\n\n","operationId":"searchPermissions","parameters":[{"name":"searchRequest","in":"query","description":"Search request parameters: filter, sort and page","required":false,"content":{"*/*":{"schema":{"$ref":"#/components/schemas/SearchRequestV2"}}}}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SearchResponsePermissionResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v1/temp-credentials/organization":{"get":{"tags":["Temporary Credentials API"],"summary":"Get MQTT temporary credentials for receiving notification for all entities in an organization.","description":"Get MQTT temporary credentials for receiving notification for all entities in an organization.\n\nGet MQTT temporary credentials for receiving notification for all entities in an organization.\n\nAlso returns a single topic formatted '[ownerOrganizationId]/+/+'.\n[ownerOrganizationId] will be filled from the access token and should not be changed.\nThe first [+] represents entityType and can be changed to any entityType. this topic will include only messages from that entity type. [+] can be used to listen to all entity types.\nThe second [+] represents entityId and can be changed to any entityId in the organization, this topic will include only messages from that entity. [+] can be used to listen to all entities.\nE.g. The topic for an organization with id [64a454f0-352f-4373-a39f-5bded3cf58e9] and entity with type device listening to all notification will be '64a454f0-352f-4373-a39f-5bded3cf58e9/device/+'.\n\nThis API requires **PROTECTED_API** permission(s).\n\n\n\nThis API requires **PROTECTED_API** permission(s).\n\n","operationId":"getTempCredentialsForOrganization","responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"SUCCESS","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TemporaryMqttCredentialsResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/v1/settings/password":{"get":{"tags":["Settings API"],"summary":"Get password Settings","description":"Get password Settings\n\nGet password Settings\n\n         Internal usage API.\n\n         This API will return the password configuration.\n\n         Response\n         Regex: defines password rules\n\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"getPasswordSettings","responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPasswordSettingsResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}}}},"/v1/security/public-key":{"get":{"tags":["Security API"],"summary":"Get public key","description":"Get public key\n\nGet public key\n\n\n\n\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"getPublicKey","responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPublicKeyResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}}}},"/v1/devices/{deviceId}/access-token":{"get":{"tags":["Device API"],"summary":"Device Login","description":"Device Login\n\nDevice Login\n\n\n\nInternal API\n\n\n\n### The below table describes the request parameters:\n\n| Parameter          | Type          | Mandatory | Description                                                   |\n            |--------------------|---------------|-----------|---------------------------------------------------------------|\n             | deviceId | String | true | \n\n\n\n\nThis API requires **UMS_DEVICE_LOGIN** permission(s).\n\n\n\nThis API requires **UMS_DEVICE_LOGIN** permission(s).\n\n","operationId":"deviceLogin","parameters":[{"name":"deviceId","in":"path","required":true,"schema":{"type":"string"}}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"\n\n### The below table describes the response parameters:\n\n| Parameter          | Type       | Description                                                   |\n            |--------------------|-------------|---------------------------------------------------------------|\n             | deviceId | String | \n\n\n","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeviceAccessTokenResponse"}}}},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}},"/system/healthCheck":{"get":{"tags":["Health Check API"],"summary":"Service Health check API","description":"Service Health check API\n\nService Health check API\n\nThe API returns 200 if the service is up, used by the Load Balancer\n\nThis API is **public**.\n\n\n\nThis API is **public**.\n\n","operationId":"healthCheck","responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/VersionResponse"}}}}}}},"/v2/services/{id}/secret-keys/{secretKeyId}":{"delete":{"tags":["Service User API"],"summary":"Delete secret key of a service user by service user id and secret key id","description":"Delete secret key of a service user by service user id and secret key id\n\nDelete secret key of a service user by service user id and secret key id\n\n\n\n\n\nThis API requires **UMS_USERS_DELETE_SECRET_KEY_BY_ID** permission(s).\n\n\n\nThis API requires **UMS_USERS_DELETE_SECRET_KEY_BY_ID** permission(s).\n\n","operationId":"deleteSecretKey","parameters":[{"name":"id","in":"path","description":"Service User ID","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"},{"name":"secretKeyId","in":"path","description":"Secret Key ID","required":true,"schema":{"type":"string","format":"uuid"},"example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}],"responses":{"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"204":{"description":""},"500":{"description":"Code : INTERNAL_SERVER_ERROR, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Code : TOKEN_NOT_VALID, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Code : ACCESS_DENIED, Details: []","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Code : SERVICE_USER_NOT_FOUND, Details: [id]\n\nCode : SECRET_KEY_ID_NOT_FOUND, Details: [secretKeyId, serviceUserId]","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}}},"security":[{"bearerAuth":[]},{"bearerAuth":[]}]}}},"components":{"schemas":{"ErrorResponse":{"type":"object","properties":{"code":{"type":"string","example":"EXAMPLE_CODE_ENTITY_NOT_FOUND"},"message":{"type":"string","example":"Entity with id [00000000-0000-0000-0000-000000000000] not found"},"serviceName":{"type":"string","example":"Device Service"},"traceId":{"type":"string","example":"a07a7e532f3541d8"},"environment":{"type":"string","example":"develop"},"details":{"type":"object","additionalProperties":{"type":"object"}}}},"CreateUserRequest":{"required":["password","username"],"type":"object","properties":{"username":{"maxLength":128,"minLength":5,"type":"string","description":"user's username. If the credential type is OTP, should be a valid phone (An E.164 formatted phone number e.g +12345678901)"},"id":{"type":"string","format":"uuid"},"password":{"type":"string"},"resetPasswordOnNextLogin":{"type":"boolean"},"credentialType":{"type":"string","enum":["PASSWORD"]},"idPs":{"uniqueItems":true,"type":"array","items":{"type":"string","enum":["UMS","ADFS"]}},"groupIds":{"uniqueItems":true,"type":"array","items":{"type":"string","format":"uuid"}},"active":{"type":"boolean"},"locked":{"type":"boolean"},"mfa":{"$ref":"#/components/schemas/Mfa"}}},"Mfa":{"required":["enabled","phone"],"type":"object","properties":{"enabled":{"type":"boolean"},"phone":{"type":"string","description":"An E.164 formatted phone number","example":"+12345678901"},"expirationInMinutes":{"maximum":1440,"minimum":1,"type":"integer","format":"int32"}}},"GroupObject":{"type":"object","properties":{"id":{"type":"string","format":"uuid"},"name":{"type":"string"}}},"UserResponse":{"required":["username"],"type":"object","properties":{"username":{"maxLength":128,"minLength":5,"type":"string","description":"user's username. If the credential type is OTP, should be a valid phone (An E.164 formatted phone number e.g +12345678901)"},"id":{"type":"string","format":"uuid"},"ownerOrganizationId":{"type":"string","format":"uuid"},"groups":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/GroupObject"}},"locked":{"type":"boolean"},"active":{"type":"boolean"},"mfa":{"$ref":"#/components/schemas/Mfa"},"loginTimestamp":{"type":"string","format":"date-time"},"credentialType":{"type":"string","enum":["PASSWORD"]},"userIdPs":{"uniqueItems":true,"type":"array","items":{"type":"string","enum":["UMS","ADFS"]}}}},"GenerateUserPasswordResponse":{"type":"object","properties":{"userId":{"type":"string","format":"uuid"},"userPassword":{"type":"string"}}},"RefreshTokenRequest":{"required":["refreshToken"],"type":"object","properties":{"refreshToken":{"type":"string"}}},"JwtToken":{"type":"object","properties":{"token":{"type":"string"},"expiration":{"type":"string","format":"date-time"}}},"LoginResponse":{"type":"object","properties":{"userId":{"type":"string","format":"uuid"},"ownerOrganizationId":{"type":"string","format":"uuid"},"accessJwt":{"$ref":"#/components/schemas/JwtToken"},"refreshJwt":{"$ref":"#/components/schemas/JwtToken"},"mfaRequired":{"type":"boolean"},"mfaExpirationInMinutes":{"type":"string","format":"date-time"},"passwordResetRequired":{"type":"boolean"},"phone":{"type":"string"}}},"LoginWithTokenRequest":{"required":["refreshToken"],"type":"object","properties":{"refreshToken":{"type":"string"}}},"SelfRegisterUserRequest":{"required":["password","username"],"type":"object","properties":{"username":{"maxLength":128,"minLength":5,"type":"string","description":"user's username. If the credential type is OTP, should be a valid phone (An E.164 formatted phone number e.g +12345678901)"},"password":{"type":"string"},"credentialType":{"type":"string","enum":["PASSWORD"]},"idPs":{"uniqueItems":true,"type":"array","items":{"type":"string","enum":["UMS","ADFS"]}}}},"ForgotPasswordRequestV2":{"required":["username"],"type":"object","properties":{"username":{"type":"string"}}},"LogoutRequest":{"required":["refreshToken"],"type":"object","properties":{"refreshToken":{"type":"string"}}},"LoginRequestV2":{"required":["username"],"type":"object","properties":{"username":{"type":"string"},"password":{"type":"string"}}},"MfaLoginRequestV2":{"type":"object","properties":{"code":{"type":"string"}}},"CreateServiceUserRequest":{"required":["roleId","type"],"type":"object","properties":{"active":{"type":"boolean"},"roleId":{"type":"string","description":"A UUID formatted string","format":"uuid","example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"},"type":{"type":"string","enum":["INTERNAL_SERVICE","EXTERNAL_SERVICE"]},"ownerOrganizationId":{"type":"string","description":"A UUID formatted string","format":"uuid","example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"},"name":{"maxLength":100,"minLength":0,"type":"string"},"accessTokenExpirationInMinutes":{"minimum":1,"type":"integer","format":"int32"}}},"CreateSecretKeyResponse":{"type":"object","properties":{"id":{"type":"string","format":"uuid"},"creationTime":{"type":"string","format":"date-time"},"secretKey":{"type":"string"}}},"CreateServiceUserResponse":{"required":["roleId","type"],"type":"object","properties":{"active":{"type":"boolean"},"roleId":{"type":"string","description":"A UUID formatted string","format":"uuid","example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"},"type":{"type":"string","enum":["INTERNAL_SERVICE","EXTERNAL_SERVICE"]},"ownerOrganizationId":{"type":"string","description":"A UUID formatted string","format":"uuid","example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"},"name":{"maxLength":100,"minLength":0,"type":"string"},"accessTokenExpirationInMinutes":{"minimum":1,"type":"integer","format":"int32"},"id":{"type":"string","format":"uuid"},"secretKeyData":{"$ref":"#/components/schemas/CreateSecretKeyResponse"}}},"ServiceUserAccessTokenRequest":{"required":["id","secretKey"],"type":"object","properties":{"id":{"type":"string","description":"A UUID formatted string","format":"uuid","example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"},"secretKey":{"type":"string"}}},"ServiceUserAccessTokenResponse":{"type":"object","properties":{"accessToken":{"type":"string"},"accessTokenExpiration":{"type":"string","format":"date-time"}}},"CreateRoleAdminRequest":{"required":["name"],"type":"object","properties":{"name":{"maxLength":128,"minLength":0,"type":"string"},"description":{"maxLength":512,"minLength":1,"type":"string"},"permissionIds":{"uniqueItems":true,"type":"array","items":{"type":"string"}}}},"PermissionBasicInfo":{"type":"object","properties":{"id":{"type":"string"}}},"RoleResponse":{"required":["name"],"type":"object","properties":{"name":{"maxLength":128,"minLength":0,"type":"string"},"description":{"maxLength":512,"minLength":1,"type":"string"},"id":{"type":"string","format":"uuid"},"type":{"type":"string","enum":["INTERNAL","BUILT_IN","INTERNAL_SERVICE_USER","CUSTOM"]},"permissions":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/PermissionBasicInfo"}},"creationTime":{"type":"string","format":"date-time"},"lastModifiedTime":{"type":"string","format":"date-time"}}},"DissociatePermissionsFromRoleAdminRequest":{"required":["permissionIds"],"type":"object","properties":{"permissionIds":{"uniqueItems":true,"type":"array","items":{"type":"string"}}}},"AssociatePermissionsToRoleAdminRequest":{"required":["permissionIds"],"type":"object","properties":{"permissionIds":{"uniqueItems":true,"type":"array","items":{"type":"string"}}}},"CreateGroupAdminRequest":{"required":["name"],"type":"object","properties":{"name":{"maxLength":45,"minLength":0,"type":"string"},"roleIds":{"uniqueItems":true,"type":"array","items":{"type":"string","format":"uuid"}}}},"GroupResponse":{"required":["name"],"type":"object","properties":{"name":{"maxLength":45,"minLength":0,"type":"string"},"id":{"type":"string","format":"uuid"},"roles":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/RoleBasicInfo"}},"builtIn":{"type":"boolean"},"creationTime":{"type":"string","format":"date-time"},"lastModifiedTime":{"type":"string","format":"date-time"}}},"RoleBasicInfo":{"type":"object","properties":{"id":{"type":"string","format":"uuid"},"name":{"type":"string"}}},"DissociateRolesFromGroupAdminRequest":{"required":["roleIds"],"type":"object","properties":{"roleIds":{"uniqueItems":true,"type":"array","items":{"type":"string","format":"uuid"}}}},"AssociateRolesToGroupAdminRequest":{"required":["roleIds"],"type":"object","properties":{"roleIds":{"uniqueItems":true,"type":"array","items":{"type":"string","format":"uuid"}}}},"TokenOperationRequest":{"type":"object","properties":{"operationData":{"type":"object","additionalProperties":{"type":"object"}}}},"TokenOperationResponse":{"type":"object","properties":{"operationData":{"type":"object","additionalProperties":{"type":"object"}}}},"Role":{"type":"object","properties":{"permissions":{"uniqueItems":true,"type":"array","items":{"type":"string"}},"name":{"type":"string"},"description":{"type":"string"}}},"ServiceUser":{"type":"object","properties":{"permissions":{"uniqueItems":true,"type":"array","items":{"type":"string"}},"serviceUserId":{"type":"string"}}},"SyncPermissionsRequest":{"type":"object","properties":{"roles":{"type":"array","items":{"$ref":"#/components/schemas/Role"}},"serviceUser":{"$ref":"#/components/schemas/ServiceUser"},"appVersion":{"type":"string"}}},"SyncPermissionsCompletedMessage":{"type":"object","properties":{"appVersion":{"type":"string"},"status":{"type":"string","enum":["SUCCESS","FAILED"]},"errorStamp":{"type":"string"}}},"UpdateUserRequest":{"type":"object","properties":{"username":{"type":"string","description":"user's username. If the credential type is OTP, should be a valid phone (An E.164 formatted phone number e.g +12345678901)"},"locked":{"type":"boolean"},"active":{"type":"boolean"},"groupIds":{"uniqueItems":true,"type":"array","items":{"type":"string","format":"uuid"}},"idPs":{"uniqueItems":true,"type":"array","items":{"type":"string","enum":["UMS","ADFS"]}},"mfa":{"$ref":"#/components/schemas/Mfa"}}},"Password":{"required":["current","new"],"type":"object","properties":{"current":{"type":"string"},"new":{"type":"string"}}},"SelfUpdateUserRequest":{"type":"object","properties":{"password":{"$ref":"#/components/schemas/Password"},"mfa":{"$ref":"#/components/schemas/Mfa"}}},"UpdateServiceUserV2Request":{"type":"object","properties":{"active":{"type":"boolean"},"roleId":{"type":"string","description":"A UUID formatted string","format":"uuid","example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}}},"SecretKeyData":{"type":"object","properties":{"id":{"type":"string","format":"uuid"},"creationTime":{"type":"string","format":"date-time"}}},"UpdateServiceUserV2Response":{"required":["roleId","type"],"type":"object","properties":{"active":{"type":"boolean"},"roleId":{"type":"string","description":"A UUID formatted string","format":"uuid","example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"},"type":{"type":"string","enum":["INTERNAL_SERVICE","EXTERNAL_SERVICE"]},"ownerOrganizationId":{"type":"string","description":"A UUID formatted string","format":"uuid","example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"},"name":{"maxLength":100,"minLength":0,"type":"string"},"accessTokenExpirationInMinutes":{"minimum":1,"type":"integer","format":"int32"},"id":{"type":"string","format":"uuid"},"secretKeys":{"type":"array","items":{"$ref":"#/components/schemas/SecretKeyData"}}}},"UpdateRoleAdminRequest":{"required":["name"],"type":"object","properties":{"name":{"maxLength":128,"minLength":0,"type":"string"},"permissionIds":{"type":"array","items":{"type":"string"}}}},"UpdateGroupAdminRequest":{"required":["name"],"type":"object","properties":{"name":{"maxLength":45,"minLength":0,"type":"string"},"roleIds":{"type":"array","items":{"type":"string","format":"uuid"}}}},"FilterV2":{"type":"object","properties":{"in":{"type":"array","items":{"type":"string"}},"eq":{"type":"object"},"lt":{"type":"number"},"lte":{"type":"number"},"gt":{"type":"number"},"gte":{"type":"number"},"like":{"type":"string"},"from":{"type":"string","format":"date-time"},"to":{"type":"string","format":"date-time"},"isNull":{"type":"boolean"},"isNotNull":{"type":"boolean"},"not":{"type":"object"},"notIn":{"type":"array","items":{"type":"string"}}}},"Order":{"required":["prop"],"type":"object","properties":{"prop":{"type":"string"},"order":{"type":"string","enum":["ASC","DESC"]}}},"SearchRequestV2":{"type":"object","properties":{"filter":{"type":"object","additionalProperties":{"$ref":"#/components/schemas/FilterV2"}},"sort":{"type":"array","items":{"$ref":"#/components/schemas/Order"}},"freeTextSearch":{"type":"string"},"limit":{"minimum":1,"type":"integer","format":"int32"},"page":{"minimum":0,"type":"integer","format":"int32"}}},"Metadata":{"type":"object","properties":{"sort":{"type":"array","items":{"$ref":"#/components/schemas/Order"}},"filter":{"type":"object","additionalProperties":{"$ref":"#/components/schemas/FilterV2"}},"page":{"$ref":"#/components/schemas/PageMetadata"},"freeTextSearch":{"type":"string"}}},"PageMetadata":{"type":"object","properties":{"totalResults":{"type":"integer","format":"int64"},"page":{"type":"integer","format":"int32"},"limit":{"type":"integer","format":"int32"}}},"SearchResponseUserResponse":{"required":["data","metadata"],"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/UserResponse"}},"metadata":{"$ref":"#/components/schemas/Metadata"}}},"GetPermissionsResponse":{"type":"object","properties":{"permissions":{"uniqueItems":true,"type":"array","items":{"type":"string"}}}},"GetServiceUserV2Response":{"required":["roleId","type"],"type":"object","properties":{"active":{"type":"boolean"},"roleId":{"type":"string","description":"A UUID formatted string","format":"uuid","example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"},"type":{"type":"string","enum":["INTERNAL_SERVICE","EXTERNAL_SERVICE"]},"ownerOrganizationId":{"type":"string","description":"A UUID formatted string","format":"uuid","example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"},"name":{"maxLength":100,"minLength":0,"type":"string"},"accessTokenExpirationInMinutes":{"minimum":1,"type":"integer","format":"int32"},"id":{"type":"string","format":"uuid"},"secretKeys":{"type":"array","items":{"$ref":"#/components/schemas/SecretKeyData"}}}},"SearchResponseRoleResponse":{"required":["data","metadata"],"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/RoleResponse"}},"metadata":{"$ref":"#/components/schemas/Metadata"}}},"PermissionResponse":{"type":"object","properties":{"id":{"type":"string"},"type":{"type":"string","enum":["BACK_END","FRONT_END"]},"creationTime":{"type":"string","format":"date-time"},"lastModifiedTime":{"type":"string","format":"date-time"}}},"SearchResponsePermissionResponse":{"required":["data","metadata"],"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/PermissionResponse"}},"metadata":{"$ref":"#/components/schemas/Metadata"}}},"SearchResponseGroupResponse":{"required":["data","metadata"],"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/GroupResponse"}},"metadata":{"$ref":"#/components/schemas/Metadata"}}},"Credentials":{"type":"object","properties":{"accessKeyId":{"type":"string"},"secretAccessKey":{"type":"string"},"sessionToken":{"type":"string"},"expiration":{"type":"string","format":"date-time"}}},"TemporaryMqttCredentialsResponse":{"type":"object","properties":{"topic":{"type":"string"},"endpoint":{"type":"string"},"credentials":{"$ref":"#/components/schemas/Credentials"}}},"GetPasswordSettingsResponse":{"type":"object","properties":{"regex":{"type":"string"}}},"GetPublicKeyResponse":{"type":"object","properties":{"publicKey":{"type":"string"}}},"DeviceAccessTokenResponse":{"type":"object","properties":{"accessJwt":{"$ref":"#/components/schemas/JwtToken"}}},"VersionResponse":{"type":"object","properties":{"version":{"type":"string"},"springVersion":{"type":"string"},"traceId":{"type":"string"}}}},"securitySchemes":{"bearerAuth":{"type":"http","scheme":"bearer","bearerFormat":"JWT"}}}}